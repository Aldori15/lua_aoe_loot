diff --git a/LuaEngine.h b/LuaEngine.h
index 0c1a84d..314c059 100644
--- a/LuaEngine.h
+++ b/LuaEngine.h
@@ -19,6 +19,7 @@
 #include "SharedDefines.h"
 #include "Weather.h"
 #include "World.h"
+#include "LootMgr.h"
 #if defined ELUNA_VMANGOS
 #include "Player.h"
 #endif
diff --git a/LuaFunctions.cpp b/LuaFunctions.cpp
index 91d8d40..b2e1277 100644
--- a/LuaFunctions.cpp
+++ b/LuaFunctions.cpp
@@ -36,6 +36,7 @@ extern "C"
 #include "CorpseMethods.h"
 #include "VehicleMethods.h"
 #include "BattleGroundMethods.h"
+#include "LootMethods.h"
 
 #if defined TRACKABLE_PTR_NAMESPACE
 ElunaConstrainedObjectRef<Aura> GetWeakPtrFor(Aura const* obj) { return { obj->GetWeakPtr(), obj->GetOwner()->GetMap() }; }
@@ -199,6 +200,9 @@ void RegisterFunctions(Eluna* E)
     ElunaTemplate<ElunaQuery>::Register(E, "ElunaQuery");
     ElunaTemplate<ElunaQuery>::SetMethods(E, LuaQuery::QueryMethods);
 
+    ElunaTemplate<Loot>::Register(E, "Loot");
+    ElunaTemplate<Loot>::SetMethods(E, LuaLoot::LootMethods);
+
     ElunaTemplate<long long>::Register(E, "long long");
 
     ElunaTemplate<unsigned long long>::Register(E, "unsigned long long");
diff --git a/methods/TrinityCore/CreatureMethods.h b/methods/TrinityCore/CreatureMethods.h
index e25c132..a00e03d 100644
--- a/methods/TrinityCore/CreatureMethods.h
+++ b/methods/TrinityCore/CreatureMethods.h
@@ -992,7 +992,7 @@ namespace LuaCreature
      *   LOOT_MODE_HARD_MODE_4      = 16,
      *   LOOT_MODE_JUNK_FISH        = 32768
      * </pre>
-     * 
+     *
      * @param uint16 lootMode
      */
     int SetLootMode(Eluna* E, Creature* creature)
@@ -1409,6 +1409,12 @@ namespace LuaCreature
         return 0;
     }
 
+    int GetLoot(Eluna* E, Creature* creature)
+    {
+        E->Push(&creature->loot);
+        return 1;
+    }
+
     ElunaRegister<Creature> CreatureMethods[] =
     {
         // Getters
@@ -1438,6 +1444,7 @@ namespace LuaCreature
         { "GetDBTableGUIDLow", &LuaCreature::GetDBTableGUIDLow },
         { "GetCreatureFamily", &LuaCreature::GetCreatureFamily },
         { "GetThreat", &LuaCreature::GetThreat },
+        { "GetLoot", &LuaCreature::GetLoot },
 
         // Setters
         { "SetRegeneratingHealth", &LuaCreature::SetRegeneratingHealth },
diff --git a/methods/TrinityCore/LootMethods.h b/methods/TrinityCore/LootMethods.h
new file mode 100644
index 0000000..4fd00c9
--- /dev/null
+++ b/methods/TrinityCore/LootMethods.h
@@ -0,0 +1,197 @@
+/*
+ * Copyright (C) 2010 - 2024 Eluna Lua Engine <http://emudevs.com/>
+ * This program is free software licensed under GPL version 3
+ * Please see the included DOCS/LICENSE.md for more information
+ */
+
+#ifndef LOOTMETHODS_H
+#define LOOTMETHODS_H
+
+namespace LuaLoot {
+int IsLooted(Eluna *E, Loot *loot) {
+  E->Push(loot->isLooted());
+  return 1;
+}
+
+int AddItem(Eluna *E, Loot *loot) {
+  uint32 itemid = Eluna::CHECKVAL<uint32>(E->L, 2);
+  uint8 min_count = Eluna::CHECKVAL<uint8>(E->L, 3);
+  uint8 max_count = Eluna::CHECKVAL<uint8>(E->L, 4);
+  float chance = Eluna::CHECKVAL<float>(E->L, 5);
+  uint16 loot_mode = Eluna::CHECKVAL<uint16>(E->L, 6);
+  bool needs_quest = Eluna::CHECKVAL<bool>(E->L, 7, false);
+
+  for (LootItem &lootitem : loot->items) {
+    if (lootitem.itemid == itemid && lootitem.count < 255) {
+      lootitem.count += min_count; // Fix: utilisez l'opérateur += plutôt que
+                                   // l'opérateur + seul
+      return 0;
+    }
+  }
+
+  LootStoreItem newLootStoreItem(itemid, 0, chance, needs_quest, loot_mode, 0,
+                                 min_count, max_count);
+  loot->AddItem(newLootStoreItem);
+
+  return 0;
+}
+
+int HasItem(Eluna *E, Loot *loot) {
+  uint32 itemid = Eluna::CHECKVAL<uint32>(E->L, 2, false);
+  uint32 count = Eluna::CHECKVAL<uint32>(E->L, 3, false);
+  bool has_item = false;
+
+  if (itemid) {
+    for (const LootItem &lootitem : loot->items) {
+      if (lootitem.itemid == itemid &&
+          (count == 0 || lootitem.count == count)) {
+        has_item = true;
+        break;
+      }
+    }
+  } else {
+    for (const LootItem &lootitem : loot->items) {
+      if (lootitem.itemid && lootitem.itemid != 0) {
+        has_item = true;
+        break;
+      }
+    }
+  }
+
+  E->Push(has_item);
+  return 1;
+}
+
+int RemoveItem(Eluna *E, Loot *loot) {
+  uint32 itemid = Eluna::CHECKVAL<uint32>(E->L, 2);
+  bool isCountSpecified = Eluna::CHECKVAL<uint32>(E->L, 3, false);
+  uint32 count = isCountSpecified ? Eluna::CHECKVAL<uint32>(E->L, 3) : 0;
+
+  for (auto it = loot->items.begin(); it != loot->items.end();) {
+    if (it->itemid == itemid) {
+      if (isCountSpecified) {
+        if (it->count > count) {
+          it->count -= count;
+          break;
+        } else {
+          count -= it->count;
+        }
+      }
+
+      it = loot->items.erase(it);
+    } else {
+      ++it;
+    }
+  }
+
+  return 0;
+}
+
+int GetMoney(Eluna *E, Loot *loot) {
+  E->Push(loot->gold);
+  return 1;
+}
+
+int SetMoney(Eluna *E, Loot *loot) {
+  uint32 money = Eluna::CHECKVAL<uint32>(E->L, 2);
+  loot->gold = money;
+  return 0;
+}
+
+int GenerateMoney(Eluna *E, Loot *loot) {
+  uint32 min = Eluna::CHECKVAL<uint32>(E->L, 2);
+  uint32 max = Eluna::CHECKVAL<uint32>(E->L, 3);
+  loot->generateMoneyLoot(min, max);
+  return 0;
+}
+
+int Clear(Eluna *E, Loot *loot) {
+  loot->clear();
+  return 0;
+}
+
+int SetUnlootedCount(Eluna *E, Loot *loot) {
+  uint32 count = Eluna::CHECKVAL<uint32>(E->L, 2);
+  loot->unlootedCount = count;
+  return 0;
+}
+
+int GetUnlootedCount(Eluna *E, Loot *loot) {
+  E->Push(loot->unlootedCount);
+  return 0;
+}
+
+int GetItems(Eluna *E, Loot *loot) {
+  lua_createtable(E->L, loot->items.size(), 0);
+  int tbl = lua_gettop(E->L);
+
+  for (unsigned int i = 0; i < loot->items.size(); i++) {
+    lua_newtable(E->L);
+
+    E->Push(loot->items[i].itemid);
+    lua_setfield(E->L, -2, "id");
+
+    E->Push(loot->items[i].itemIndex);
+    lua_setfield(E->L, -2, "index");
+
+    E->Push(loot->items[i].count);
+    lua_setfield(E->L, -2, "count");
+
+    E->Push(loot->items[i].needs_quest);
+    lua_setfield(E->L, -2, "needs_quest");
+
+    E->Push(loot->items[i].is_looted);
+    lua_setfield(E->L, -2, "is_looted");
+
+    lua_rawseti(E->L, tbl, i + 1);
+  }
+
+  lua_settop(E->L, tbl);
+  return 1;
+}
+
+int UpdateItemIndex(Eluna *E, Loot *loot) {
+  for (unsigned int i = 0; i < loot->items.size(); i++) {
+    loot->items[i].itemIndex = i;
+  }
+  return 0;
+}
+
+int SetItemLooted(Eluna *E, Loot *loot) {
+  uint32 itemid = Eluna::CHECKVAL<uint32>(E->L, 2);
+  uint32 count = Eluna::CHECKVAL<uint32>(E->L, 3);
+  bool looted = Eluna::CHECKVAL<uint32>(E->L, 4, true);
+
+  for (auto &lootItem : loot->items) {
+    if (lootItem.itemid == itemid && (count == 0 || lootItem.count == count)) {
+      lootItem.is_looted = looted;
+      break;
+    }
+  }
+
+  return 0;
+}
+
+ElunaRegister<Loot> LootMethods[] = {
+    // Get
+    {"GetMoney", &LuaLoot::GetMoney},
+    {"GetItems", &LuaLoot::GetItems},
+    {"GetUnlootedCount", &LuaLoot::GetUnlootedCount},
+
+    // Set
+    {"AddItem", &LuaLoot::AddItem},
+    {"RemoveItem", &LuaLoot::RemoveItem},
+    {"SetMoney", &LuaLoot::SetMoney},
+    {"SetUnlootedCount", &LuaLoot::SetUnlootedCount},
+    {"UpdateItemIndex", &LuaLoot::UpdateItemIndex},
+    {"SetItemLooted", &LuaLoot::SetItemLooted},
+
+    // Boolean
+    {"IsLooted", &LuaLoot::IsLooted},
+    {"HasItem", &LuaLoot::HasItem},
+    {"Clear", &LuaLoot::Clear},
+
+    {NULL, NULL}};
+} // namespace LuaLoot
+
+#endif
